apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

apply from: "$project.rootDir/tools/script-git-version.gradle"
apply from: "$project.rootDir/tools/script-findbugs.gradle"
apply from: "$project.rootDir/tools/script-lint.gradle"
apply from: "$project.rootDir/tools/script-pmd.gradle"
apply from: "$project.rootDir/tools/script-java-code-coverage.gradle"

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    flavorDimensions 'buildtype'

    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibility
        targetCompatibility rootProject.ext.targetCompatibility
    }

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            keyAlias 'ktExampleDebug'
            keyPassword 'ktExampleDebug'
            storePassword 'ktExample'
            storeFile file('../keystore/debug.keystore')
        }
        release {
            keyAlias 'ktExampleRelease'
            keyPassword 'ktExampleRelease'
            storePassword 'ktExample'
            storeFile file('../keystore/release.keystore')
        }
    }

    productFlavors {
        dev {
            dimension 'buildtype'
            signingConfig signingConfigs.debug
            versionCode gitVersionCodeTime
            versionName gitVersionName
            applicationId "com.astir_trotter.ktexample.dev"

            setProperty("archivesBaseName", "KtExample-${versionName}-dev")
        }

        prod {
            dimension 'buildtype'
            signingConfig signingConfigs.release
            versionCode gitVersionCode
            versionName gitVersionName
            applicationId "com.astir_trotter.ktexample"

            setProperty("archivesBaseName", "KtExample-${versionName}")
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), "$project.rootDir/tools/rules-proguard.pro"
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), "$project.rootDir/tools/rules-proguard-debug.pro"
            signingConfig signingConfigs.debug
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

kapt {
    generateStubs = true
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    compile "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    compile "com.android.support:design:${rootProject.ext.supportLibVersion}"
    compile 'com.android.support.constraint:constraint-layout:1.0.2'

    // Picasso
    compile 'com.squareup.picasso:picasso:2.5.2'

    // RxJava / RxAndroid
    compile 'io.reactivex:rxjava:1.1.3'
    compile 'io.reactivex:rxandroid:1.1.0'

    // Retrofit
    compile "com.squareup.retrofit2:retrofit:2.0.2"
    compile "com.squareup.retrofit2:converter-moshi:2.0.0" // JSON -> Java/Kotlin class

    // Dagger 2
    compile 'com.google.dagger:dagger:2.4'
    kapt 'com.google.dagger:dagger-compiler:2.4'
    provided 'org.glassfish:javax.annotation:10.0-b28'

    // Tests
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.1.0'
    testCompile 'org.jetbrains.spek:spek:1.0.25'
}